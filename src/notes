<div class="binary-tree">
  <div class="node">
    <div class="node-content">1</div>
    <div class="left-child">
      <div class="node">
        <div class="node-content">2</div>
        <div class="left-child"></div>
        <div class="right-child"></div>
      </div>
    </div>
    <div class="right-child">
      <div class="node">
        <div class="node-content">3</div>
        <div class="left-child"></div>
        <div class="right-child"></div>
      </div>
    </div>
  </div>
</div>


.binary-tree {
  display: flex;
  justify-content: center;
}

.node {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.node-content {
  background-color: #fff;
  border: 1px solid #000;
  width: 50px;
  height: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.left-child, .right-child {
  width: 50%;
  display: flex;
  align-items: center;
}

<div class="tree">
  <div class="node">
    <div class="circle">8</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
  <div class="node">
    <div class="circle">3</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
  <div class="node">
    <div class="circle">1</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
  <div class="node">
    <div class="circle">6</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
  <div class="node">
    <div class="circle">4</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
  <div class="node">
    <div class="circle">7</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
  <div class="node">
    <div class="circle">10</div>
    <div class="line"></div>
    <div class="line"></div>
  </div>
</div>

.tree {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

.node {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

.circle {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: #f1f1f1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.line {
  position: absolute;
  width: 100%;
  height: 1px;
  background: #ccc;
}

.line:nth-of-type(1) {
  transform: rotate(45deg);
}

.line:nth-of-type(2) {
  transform: rotate(-45deg);
}


<div class="binary-tree">
  <div class="node">
    <div class="node-content">1</div>
    <div class="left-child">
      <div class="node">
        <div class="node-content">2</div>
        <div class="left-child"></div>
        <div class="right-child"></div>
      </div>
    </div>
    <div class="right-child">
      <div class="node">
        <div class="node-content">3</div>
        <div class="left-child"></div>
        <div class="right-child"></div>
      </div>
    </div>
  </div>
</div>


/*Now the CSS*/
* {margin: 0; padding: 0;}
.tree {
  display: grid;
  justify-content: center;
  align-items: center;
}
.tree ul {
	padding-top: 20px; 
  position: relative;
	transition: all 0.5s;
	-webkit-transition: all 0.5s;
	-moz-transition: all 0.5s;
}

.tree li {
	float: left; 
  text-align: center;
	list-style-type: none;
	position: relative;
	padding: 20px 5px 0 5px;
	
	transition: all 0.5s;
	-webkit-transition: all 0.5s;
	-moz-transition: all 0.5s;
}

/*We will use ::before and ::after to draw the connectors*/

.tree li::before, .tree li::after{
	content: '';
	position: absolute; 
  top: 0; 
  right: 50%;
	border-top: 1px solid #ccc;
	width: 50%; 
  height: 20px;
}
.tree li::after{
	right: auto; 
  left: 50%;
	border-left: 1px solid #ccc;
}

/*We need to remove left-right connectors from elements without 
any siblings*/
.tree li:only-child::after, .tree li:only-child::before {
	display: none;
}

/*Remove space from the top of single children*/
.tree li:only-child{ padding-top: 0;}

/*Remove left connector from first child and 
right connector from last child*/
.tree li:first-child::before, .tree li:last-child::after{
	border: 0 none;
}
/*Adding back the vertical connector to the last nodes*/
.tree li:last-child::before{
	border-right: 1px solid #ccc;
	border-radius: 0 5px 0 0;
	-webkit-border-radius: 0 5px 0 0;
	-moz-border-radius: 0 5px 0 0;
}
.tree li:first-child::after{
	border-radius: 5px 0 0 0;
	-webkit-border-radius: 5px 0 0 0;
	-moz-border-radius: 5px 0 0 0;
}

/*Time to add downward connectors from parents*/
.tree ul ul::before{
	content: '';
	position: absolute; top: 0; left: 50%;
	border-left: 1px solid #ccc;
	width: 0; height: 20px;
}

.tree li div{
	border: 1px solid #ccc;
	padding: 5px 10px;
	text-decoration: none;
	color: #666;
	font-family: arial, verdana, tahoma;
	font-size: 11px;
	display: inline-block;
	
	border-radius: 5px;
	-webkit-border-radius: 5px;
	-moz-border-radius: 5px;
	
	transition: all 0.5s;
	-webkit-transition: all 0.5s;
	-moz-transition: all 0.5s;
}

/*Time for some hover effects*/
/*We will apply the hover effect the the lineage of the element also*/
.tree li div:hover, .tree li div:hover+ul li div {
	background: #c8e4f8; color: #000; border: 1px solid #94a0b4;
}
/*Connector styles on hover*/
.tree li div:hover+ul li::after, 
.tree li div:hover+ul li::before, 
.tree li div:hover+ul::before, 
.tree li div:hover+ul ul::before{
	border-color:  #94a0b4;
}

// console.log(newBST);
const prettyPrint = (node, prefix = "", isLeft = true) => {
  // console.log(node);
  if (node.rightNode !== null) {
    prettyPrint(node.rightNode, `${prefix}${isLeft ? "│   " : "    "}`, false);
  }
  console.log(`${prefix}${isLeft ? "└── " : "┌── "}${node.data}`);
  if (node.leftNode !== null) {
    prettyPrint(node.leftNode, `${prefix}${isLeft ? "    " : "│   "}`, true);
  }
};

<ul class="children">
  <li class="left-subtree">
    <div class="data"></div>
  </li>
  <li class="right-subtree">
    <div class="data"></div>
  </li>
</ul>